{
    "articles": [
      {
        "uri": "https://www.arduino.cc/wiki/static/193f2e0b88701497c56fcd7c0b983b2c/4b190/A000066_iso_both.jpg",
        "caption": "What is Arduino?",
        "text": "Arduino is an open-source electronics platform based on easy-to-use hardware and software. Arduino boards are able to read inputs - light on a sensor, a finger on a button, or a Twitter message - and turn it into an output - activating a motor, turning on an LED, publishing something online. You can tell your board what to do by sending a set of instructions to the microcontroller on the board. To do so you use the Arduino programming language (based on Wiring), and the Arduino Software (IDE), based on Processing.\n\nOver the years Arduino has been the brain of thousands of projects, from everyday objects to complex scientific instruments. A worldwide community of makers - students, hobbyists, artists, programmers, and professionals - has gathered around this open-source platform, their contributions have added up to an incredible amount of accessible knowledge that can be of great help to novices and experts alike.\n\nArduino was born at the Ivrea Interaction Design Institute as an easy tool for fast prototyping, aimed at students without a background in electronics and programming. As soon as it reached a wider community, the Arduino board started changing to adapt to new needs and challenges, differentiating its offer from simple 8-bit boards to products for IoT applications, wearable, 3D printing, and embedded environments.\n\nWhy Arduino?\nThanks to its simple and accessible user experience, Arduino has been used in thousands of different projects and applications. The Arduino software is easy-to-use for beginners, yet flexible enough for advanced users. It runs on Mac, Windows, and Linux. Teachers and students use it to build low cost scientific instruments, to prove chemistry and physics principles, or to get started with programming and robotics. Designers and architects build interactive prototypes, musicians and artists use it for installations and to experiment with new musical instruments. Makers, of course, use it to build many of the projects exhibited at the Maker Faire, for example. Arduino is a key tool to learn new things. Anyone - children, hobbyists, artists, programmers - can start tinkering just following the step by step instructions of a kit, or sharing ideas online with other members of the Arduino community.\n\nThere are many other microcontrollers and microcontroller platforms available for physical computing. Parallax Basic Stamp, Netmedia's BX-24, Phidgets, MIT's Handyboard, and many others offer similar functionality. All of these tools take the messy details of microcontroller programming and wrap it up in an easy-to-use package. Arduino also simplifies the process of working with microcontrollers, but it offers some advantage for teachers, students, and interested amateurs over other systems:\n\nInexpensive - Arduino boards are relatively inexpensive compared to other microcontroller platforms. The least expensive version of the Arduino module can be assembled by hand, and even the pre-assembled Arduino modules cost less than \\$50\n\nCross-platform - The Arduino Software (IDE) runs on Windows, Macintosh OSX, and Linux operating systems. Most microcontroller systems are limited to Windows.\n\nSimple, clear programming environment - The Arduino Software (IDE) is easy-to-use for beginners, yet flexible enough for advanced users to take advantage of as well. For teachers, it's conveniently based on the Processing programming environment, so students learning to program in that environment will be familiar with how the Arduino IDE works.\n\nOpen source and extensible software - The Arduino software is published as open source tools, available for extension by experienced programmers. The language can be expanded through C++ libraries, and people wanting to understand the technical details can make the leap from Arduino to the AVR C programming language on which it's based. Similarly, you can add AVR-C code directly into your Arduino programs if you want to.\n\nOpen source and extensible hardware - The plans of the Arduino boards are published under a Creative Commons license, so experienced circuit designers can make their own version of the module, extending it and improving it. Even relatively inexperienced users can build the breadboard version of the module in order to understand how it works and save money.\n\nHow do I use Arduino?\nSee the getting started guide. If you are looking for inspiration you can find a great variety of Tutorials on Arduino Project Hub.\n\nThe text of the Arduino getting started guide is licensed under a Creative Commons Attribution-ShareAlike 3.0 License. Code samples in the guide are released into the public domain.\n\nLast revision February 05, 2018, at 08:43 PM"
      },
      {
        "uri": "https://cdn.shopify.com/s/files/1/0438/4735/2471/products/ASX00029_03.front_643x483.jpg?v=1626446504",
        "caption": "How to use Arduino Shield?",
        "text": "Shields[1] are modular circuit boards that piggyback onto your Arduino to instill it with extra functionality. Want to connect your Arduino to the Internet and post to Twitter? There's a shield for that. Want to make your Arduino an autonomous rover? There are shields for that. There are dozens (hundreds?) of shields out there, all of which make your Arduino more than just a development board with a blinky LED.\n\nSparkFun catalog manager RobertC. in awe of an extravagant platter of shields.\nMany Arduino shields are stackable. You can connect many shields together to create a \"Big Mac\" of Arduino modules. You could, for example, combine an Arduino Uno with a Voice Box Shield, and a WiFly Shield to create a WiFi Talking Stephen Hawking(TM).\n\nCombine and stack shields to make all-inclusive projects\nShields are often supplied with either an example sketch, or a library. So, not only do they just simply plug into your Arduino, but all you need to do to make them work is upload up some example code to the Arduino.\n\n[1] Note: In general, these are called \"daughter boards.\" The terminology and layout depends on the environment platform and form factor. Shields for Arduino typically use the Arduino Uno R3 footprint. However, shields can have a different layout depending on the architecture. Stackable PCBs for the Raspberry Pi are referred to as HATs or pHATs while the BeagleBone refers to them as Capes. We'll focus on the Arduino shields throughout this tutorial.\nShield Form Factor\nEvery Arduino shield must have the same form-factor as the standard Arduino. Power and ground pins on one eight (previously six) pin header, and analog pins on a six-pin header next to that. Digital pins cover the other edge on the other side, an eight-pin header separated from a 10-pin by that weird 0.5\" spacing. Some shields also require a connection to the Arduino's ICSP header (the 2x3 programming header on the end).\n\nShield Pinout\nSome shields use every pin on the Arduino, while others only use a couple. When stacking shields, it's important to make sure they don't use overlapping pins. Some shields communicate with the Arduino via SPI, I2C, or Serial, and others use the Arduino's interrupts or analog inputs.\n\nThere's a great variety of Arduino shields out there -- too many to ever include in this tutorial. On the next page we'll go over a handful of the more popular and unique shields.\n\nShieldstravaganza\nHere's a list of SparkFun's more popular and unique shields. This isn't an exhaustive list of all Arduino shields (for that, check out shieldlist.org), but it's a good collection. They're sorted into semi-logical categories.\n\nIf you're more visually inclined, check out our ShieldStravaganza Video Series (Part 1, Part 2, and Part 3). These three exciting videos are filled to the brim with shields, shields, shields, oh...and more shields.\n\n\n\n\nPrototyping (And Then Some)\nPrototyping shields don't add much functionality to the Arduino, but they do help in other ways. These shields might do something as simple as breaking out the Arduino pins to screw terminals. In general they make wiring to the Arduino easier.\n\nProtoShield Kit - The self-titled star of this category. This shield is basically a big prototyping area. You can stick a mini-breadboard on top, or just solder directly to the shield's prototyping area.\nProtoShield Kit images\nProtoScrew Shield - Like the ProtoShield, but each pin is also broken out to a screw terminal. Handy for connecting to external motors or heavy-duty sensors.\nGo-Between Shield - The intention of this shield is to sit in between two shields. It swaps the pins of the top shield, so they don't interfere with each other.\nLiPower Shield - This shield allows you to power your Arduino with a Lithium Polymer battery.\nDanger Shield - The most awesomest shield evar! This shield is a crazy conglomeration of displays, potentiometers, and other sensors. Great for learning the ins and outs of Arduino or incorporating into audio mixing projects.\nJoystick Shield Kit - This makes your Arduino a bare-bones controller. With a joystick and four buttons, this makes for a great robot controller.\nmicroSD Shield - The Arduino has limited storage space, but this easy-to-use shield (along with the SD library) allow for plenty of extra storage.\nEthernet, WiFi, Wireless, GPS, Etc.\nArduino Ethernet Shield - This is one of the more classic shields. The Ethernet Shield supplies your Arduino with an ability to connect to the world wide web. There's a great library to support it as well.\nArduino Ethernet Shield\nWiFly Shield - SparkFun's WiFi Shield mainstay, this shield equips your Arduino with the ability to connect to 802.11b/g wireless networks. Then it can act as either a web server, client, or both.\nArduino Wi-Fi Shield - This is the Arduino Ethernet Shield sans wires. This shield can get your Arduino connected to a WiFi router, so it can host webpages and scour the Internet.\nElectric Imp Shield - Electric Imp is a unique WiFi module, which looks like an SD card, but it packs a powerful cloud-based WiFi controller. This is probably the least expensive WiFi-enabling Arduino shield.\nXBee Shield - XBee's won't get you connected to the Internet, but they do provide a solid, cheap means for communicating wirelessly. You could use an XBee to wirelessly trigger coffee machines, sprinklers, lights, or other household appliances.\nCellular Shield w/ SM5100B - Turn your Arduino into a cellular phone! Send SMS text messages, or hook up a microphone and speaker and use it to replace your iPhone.\nGPS Shield - GPS isn't as complicated as you might think. With a GPS Shield, your Arduino will always know where it is."
      },
      {
        "uri": "https://assets.raspberrypi.com/static/kit-lg-7729577eb18c982a47c52c73d0fcb20f.jpg",
        "caption": "Using 'Raspberry Pi 400'",
        "text": "It’s a Raspberry Pi. It’s a keyboard.\nA Raspberry Pi 400\nIt’s a Raspberry Pi designed into a keyboard.\n\nRaspberry Pi 400 incorporates a purpose-built board based on Raspberry Pi 4. Featuring the same powerful processor, Raspberry Pi 400 has specially designed thermals to keep your computer cool and silent while you’re hard at work.\n\nThe GPIO pins remain accessible, so if you want to explore beyond the desktop, you can connect components and prototype your projects.\n\nThis is the kit you’re looking for\nAll the elements of The Raspberry Pi 400 kit laid out on a desk\nYour personal computer kit comes with a mouse, power supply, micro HDMI to HDMI cable, and SD card preloaded with Raspberry Pi OS. There’s also the official Raspberry Pi Beginner’s Guide to help you get the most out of your new computer.\n\nAlready have your accessories? Raspberry Pi 400 is also available as a standalone unit.\n\nWe’re speaking your language\nKeyboard keys for various typed characters, from the different languages supported by Raspberry Pi 400\nAs well as our UK and US English keyboard variants, Raspberry Pi 400 is available in a variety of languages. See below for our full range of Raspberry Pi 400 keyboard layouts.\n\nRaspberry Pi OS\nEdit documents. Organise your calendar. Get hands-on with programming. Connect with friends.\n\nRaspberry Pi OS is our official supported operating system, so you’ll get the smoothest performance from your new computer while you get stuff done."
      },
      {
        "uri": "https://mir-s3-cdn-cf.behance.net/project_modules/1400/f5643096750899.5eb54f3381b8f.png",
        "caption": "How to use Python?",
        "text": "Python For Beginners\nWelcome! Are you completely new to programming? If not then we presume you will be looking for information about why and how to get started with Python. Fortunately an experienced programmer in any programming language (whatever it may be) can pick up Python very quickly. It's also easy for beginners to use and learn, so jump in!\n\nInstalling\nInstalling Python is generally easy, and nowadays many Linux and UNIX distributions include a recent Python. Even some Windows computers (notably those from HP) now come with Python already installed. If you do need to install Python and aren't confident about the task you can find a few notes on the BeginnersGuide/Download wiki page, but installation is unremarkable on most platforms.\n\nLearning\nBefore getting started, you may want to find out which IDEs and text editors are tailored to make Python editing easy, browse the list of introductory books, or look at code samples that you might find helpful.\n\nThere is a list of tutorials suitable for experienced programmers on the BeginnersGuide/Tutorials page. There is also a list of resources in other languages which might be useful if English is not your first language.\n\nThe online documentation is your first port of call for definitive information. There is a fairly brief tutorial that gives you basic information about the language and gets you started. You can follow this by looking at the library reference for a full description of Python's many libraries and the language reference for a complete (though somewhat dry) explanation of Python's syntax. If you are looking for common Python recipes and patterns, you can browse the ActiveState Python Cookbook\n\nLooking for Something Specific?\nIf you want to know whether a particular application, or a library with particular functionality, is available in Python there are a number of possible sources of information. The Python web site provides a Python Package Index (also known as the Cheese Shop, a reference to the Monty Python script of that name). There is also a search page for a number of sources of Python-related information. Failing that, just Google for a phrase including the word ''python'' and you may well get the result you need. If all else fails, ask on the python newsgroup and there's a good chance someone will put you on the right track.\n\nFrequently Asked Questions\nIf you have a question, it's a good idea to try the FAQ, which answers the most commonly asked questions about Python.\n\nLooking to Help?\nIf you want to help to develop Python, take a look at the developer area for further information. Please note that you don't have to be an expert programmer to help. The documentation is just as important as the compiler, and still needs plenty of work!"
      },
      {
        "uri": "https://media.sketchfab.com/models/a9299dd053cb46a0b2dfcffd378f1088/thumbnails/7874f49d3d204b76ba2324758424ca09/497179095e844e3cabc33d750ce4ee5a.jpeg",
        "caption": "How to use Unity Game Engine?",
        "text": "What Unity is Unity?\nUnity is a 2D/3D engine and framework that gives you a system for designing game or app scenes for 2D, 2.5D and 3D. I say games and apps because I’ve seen not just games, but training simulators, first-responder applications, and other business-focused applications developed with Unity that need to interact with 2D/3D space. Unity allows you to interact with them via not only code, but also visual components, and export them to every major mobile platform and a whole lot more—for free. (There’s also a pro version that’s very nice, but it isn’t free. You can do an impressive amount with the free version.) Unity supports all major 3D applications and many audio formats, and even understands the Photoshop .psd format so you can just drop a .psd file into a Unity project. Unity allows you to import and assemble assets, write code to interact with your objects, create or import animations for use with an advanced animation system, and much more.\n\nAs Figure 1 indicates, Unity has done work to ensure cross-platform support, and you can change platforms literally with one click, although to be fair, there’s typically some minimal effort required, such as integrating with each store for in-app purchases.\n\nPlatforms Supported by Unity\nFigure 1 Platforms Supported by Unity\n\nPerhaps the most powerful part of Unity is the Unity Asset Store, arguably the best asset marketplace in the gaming market. In it you can find all of your game component needs, such as artwork, 3D models, animation files for your 3D models (see Mixamo’s content in the store for more than 10,000 motions), audio effects and full tracks, plug-ins—including those like the MultiPlatform toolkit that can help with multiple platform support—visual scripting systems such as PlayMaker and Behave, advanced shaders, textures, particle effects, and more. The Unity interface is fully scriptable, allowing many third-party plug-ins to integrate right into the Unity GUI. Most, if not all, professional game developers use a number of packages from the asset store, and if you have something decent to offer, you can publish it there as well.\n\nWhat Unity Isn’t\nI hesitate to describe anything Unity isn’t as people challenge that all the time. However, Unity by default isn’t a system in which to design your 2D assets and 3D models (except for terrains). You can bring a bunch of zombies into a scene and control them, but you wouldn’t create zombies in the Unity default tooling. In that sense, Unity isn’t an asset-creation tool like Autodesk Maya or 3DSMax, Blender or even Adobe Photoshop. There’s at least one third-party modeling plug-in (ProBuilder), though, that allows you to model 3D components right inside of Unity; there are 2D world builder plug-ins such as the 2D Terrain Editor for creating 2D tiled environments, and you can also design terrains from within Unity using their Terrain Tools to create amazing landscapes with trees, grass, mountains, and more. So, again, I hesitate to suggest any limits on what Unity can do.\n\nWhere does Microsoft fit into this? Microsoft and Unity work closely together to ensure great platform support across the Microsoft stack. Unity supports Windows standalone executables, Windows Phone, Windows Store applications, Xbox 360 and Xbox One.\n\nGetting Started\nDownload the latest version of Unity and get yourself a two-button mouse with a clickable scroll wheel. There’s a single download that can be licensed for free mode or pro. You can see the differences between the versions at unity3d.com/unity/licenses. The Editor, which is the main Unity interface, runs on Windows (including Surface Pro), Linux and OS X.\n\nI’ll get into real game development with Unity in the next article, but, first, I’ll explore the Unity interface, project structure and architecture.\n\nArchitecture and Compilation\nUnity is a native C++-based game engine. You write code in C#, JavaScript (UnityScript) or, less frequently, Boo. Your code, not the Unity engine code, runs on Mono or the Microsoft .NET Framework, which is Just-in-Time (JIT) compiled (except for iOS, which doesn’t allow JIT code and is compiled by Mono to native code using Ahead-of-Time [AOT] compilation).\n\nUnity lets you test your game in the IDE without having to perform any kind of export or build. When you run code in Unity, you’re using Mono version 3.5, which has API compatibility roughly on par with that of the .NET Framework 3.5/CLR 2.0.\n\nYou edit your code in Unity by double-clicking on a code file in the project view, which opens the default cross-platform editor, Mono­Develop. If you prefer, you can configure Visual Studio as your editor.\n\nYou debug with MonoDevelop or use a third-party plug-in for Visual Studio, UnityVS. You can’t use Visual Studio as a debugger without UnityVS because when you debug your game, you aren’t debugging Unity.exe, you’re debugging a virtual environment inside of Unity, using a soft debugger that’s issued commands and performs actions.\n\nTo debug, you launch MonoDevelop from Unity. MonoDevelop has a plug-in that opens a connection back to the Unity debugger and issues commands to it after you Debug | Attach to Process in MonoDevelop. With UnityVS, you connect the Visual Studio debugger back to Unity instead."
      }
    ]
  }